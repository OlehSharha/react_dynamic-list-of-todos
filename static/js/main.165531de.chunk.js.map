{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/Filter.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/utils/PreparedTodo.ts","index.tsx"],"names":["TodoList","todos","selectTodo","selectedTodoId","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","setQuery","status","setStatus","debounceQuery","handleSelectFilterType","useCallback","event","target","value","onChange","placeholder","handleQuery","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","Loader","TodoModal","useState","user","setUser","handleError","setHandleError","fetchUser","a","userId","userFromServer","useEffect","href","email","name","App","setTodos","setSelectedTodoId","All","apllyQuery","setApllyQuery","visibleTodos","useMemo","preparedTodos","lowerQuery","toLowerCase","filter","includes","Active","Completed","Error","getVisibleTodos","selectedTodo","find","isMatchingTodos","fetchTodos","todoFromServer","debouncedChangeHandler","debounce","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.165531de.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (id: number) => void;\n  selectedTodoId: number\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames(\n            { 'has-background-info-light': selectedTodoId === todo.id },\n          )}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n            >\n              {todo.title}\n\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => {\n                selectTodo(todo.id);\n              }}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  'far',\n                  {\n                    'fa-eye': selectedTodoId !== todo.id,\n                    'fa-eye-slash': selectedTodoId === todo.id,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { useCallback } from 'react';\nimport { FilterType } from '../../types/Filter';\n\ntype Props = {\n  query: string,\n  setQuery: (event: string) => void,\n  status: string,\n  setStatus: (stats: FilterType) => void;\n  debounceQuery: (event: string) => void;\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  query,\n  setQuery,\n  status,\n  setStatus,\n  debounceQuery,\n}) => {\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    debounceQuery(event.target.value);\n  };\n\n  const resetQuery = () => {\n    setQuery('');\n    debounceQuery('');\n  };\n\n  const handleSelectFilterType = useCallback(\n    (event: React.ChangeEvent<HTMLSelectElement>) => {\n      setStatus(event.target.value as FilterType);\n    },\n    [],\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => {\n              handleSelectFilterType(event);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            handleQuery(event);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n\n            <button\n              aria-label=\"button\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                resetQuery();\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo\n  selectTodo: (id: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectTodo, todo }) => {\n  const [user, setUser] = useState<User>();\n  const [handleError, setHandleError] = useState(false);\n\n  const fetchUser = async () => {\n    try {\n      const userFromServer = await getUser(todo.userId);\n\n      setUser(userFromServer);\n    } catch (error) {\n      setHandleError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchUser();\n  }, []);\n\n  return (\n    <div\n      className={classNames('modal', { 'is-active': todo })}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n      {handleError\n       && <p>No server respone</p>}\n\n      {!user\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                aria-label=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => selectTodo(0)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { debounce } from 'lodash';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterType } from './types/Filter';\nimport { getVisibleTodos } from './components/utils/PreparedTodo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState<string>(FilterType.All);\n  const [apllyQuery, setApllyQuery] = useState('');\n  const [handleError, setHandleError] = useState(false);\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todos, status, apllyQuery)\n  ),\n  [todos, status, apllyQuery]);\n\n  const selectedTodo = useMemo(() => {\n    return todos.find(\n      todo => todo.id === selectedTodoId,\n    );\n  }, [selectedTodoId, todos]);\n\n  const isMatchingTodos = (!query)\n    ? <Loader />\n    : <p>Nothing is matching</p>;\n\n  const selectTodo = (id: number) => (\n    (selectedTodoId !== id)\n      ? setSelectedTodoId(id)\n\n      : setSelectedTodoId(0)\n  );\n\n  const fetchTodos = async () => {\n    try {\n      const todoFromServer = await getTodos();\n\n      setTodos(todoFromServer);\n    } catch (error) {\n      setHandleError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  const debouncedChangeHandler = useCallback(\n    debounce(setApllyQuery, 1000),\n    [],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                status={status}\n                setStatus={setStatus}\n                debounceQuery={debouncedChangeHandler}\n              />\n            </div>\n\n            <div className=\"block\">\n              {handleError\n              && (<p>No server response</p>)}\n\n              {!visibleTodos.length\n                ? (\n                  isMatchingTodos\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectTodo={selectTodo}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal\n            todo={selectedTodo}\n            selectTodo={selectTodo}\n          />\n        )}\n    </>\n  );\n};\n","import { FilterType } from '../../types/Filter';\nimport { Todo } from '../../types/Todo';\n\nexport const getVisibleTodos = (todos: Todo[], type: string, query: string) => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    preparedTodos = preparedTodos\n      .filter(todo => todo.title.toLowerCase().includes(lowerQuery));\n  }\n\n  preparedTodos = preparedTodos.filter(todo => {\n    switch (type) {\n      case FilterType.All:\n        return true;\n      case FilterType.Active:\n        return !todo.completed;\n      case FilterType.Completed:\n        return todo.completed;\n      default:\n        throw new Error('Filter type is incorrect');\n    }\n  });\n\n  return preparedTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}